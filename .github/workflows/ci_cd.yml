name: CI and CD

on:
  push:
    branches:
      - stage

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  STACK_NAME: sam-app
  AWS_REGION: us-east-1
  # TESTING_IMAGE_REPOSITORY: 690744128016.dkr.ecr.us-east-1.amazonaws.com/salary_prediction.v1

jobs:
  test:
    runs-on: ubuntu-latest 
    steps:
      - name: Clear Cache
        run: |
          rm -rf $RUNNER_TOOL_CACHE
  
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
  
      - name: Install dependencies
        working-directory: tests/
        run: |
          pip install pipenv 
  
      - name: Run Unit tests
        working-directory: tests/unit_test/tests
        run: |
          pipenv install --dev boto3
          # Run pytest
          pipenv run pytest model_test.py 
          
      - name: Lint
        working-directory: tests/
        run: pipenv install --dev  boto3 && pipenv run pylint tests/

      - name: Integration Test
        working-directory: tests/integration_test/tests
        run: pipenv install --dev && pipenv run pytest test_integration.py

  

  # flask_nginx:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Python 3.8
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.8

  #     - name: Install dependencies
  #       working-directory: deployment/web_flask
  #       run: |
  #         pip install pipenv

  #     - name: Configure AWS CLI
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set region ${{ env.AWS_REGION }} 

  #     - name: Start Flask Application
  #       working-directory: deployment/web_flask
  #       run: |
  #         docker-compose -f docker-compose.yml up -d
  #         until docker-compose -f docker-compose.yml exec web curl -s -o /dev/null http://localhost:9696; do
  #           echo "Waiting for Flask to start..."
  #           sleep 5
  #           docker-compose -f docker-compose.yml logs  # Add this line to see container logs
  #         done

  #     - name: Run Tests
  #       working-directory: deployment/web_flask
  #       run: |
  #         docker-compose -f docker-compose.yml exec web python test.py

  #     - name: Publish Docker image to GitHub Container Registry
  #       run: |
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #         docker-compose -f deployment/docker-compose.yml push

  #     - name: Deploy Flask App to EBS
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set region us-east-1
  #         eb deploy Salary_prediction

  # lambda_apigateway:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clear Cache
  #       run: |
  #         rm -rf $RUNNER_TOOL_CACHE
  
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  
  #     - name: Configure AWS CLI
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set region ${{ env.AWS_REGION }} 
  
  #     - name: Build and Validate Lambda Function
  #       run: |
  #         cd deployment/sam-app
  #         sam build
  #         sam validate
  
  #     - name: Deploy Lambda Function
  #       run: |
  #         cd deployment/sam-app  
  #         sam deploy --debug --resolve-image-repos --stack-name sam-app --template template.yaml         
  #           --template template.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${AWS_REGION} \
  #           --no-fail-on-empty-changeset \
  #           --config-env default \
  #           --profile my-aws-profile
          
  #     - name: Delete Lambda Function
  #       run: |
  #         aws cloudformation delete-stack --stack-name sam-app


# --image-repository ${TESTING_IMAGE_REPOSITORY}
# image_repository = "690744128016.dkr.ecr.us-east-1.amazonaws.com/salary_prediction.v1" 
# pipenv install pytest pylint --dev
# pipenv install pipenv
