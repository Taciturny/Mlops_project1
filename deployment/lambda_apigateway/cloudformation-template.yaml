AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Lambda Function and API Gateway

Parameters:
  FunctionName:
    Type: String
    Default: ds-salary-prediction
    Description: Name for the Lambda function

  S3BucketName:
    Type: String
    Default: artifactss31991
    Description: S3 bucket name where Lambda function code resides

  S3Key:
    Type: String
    Default: lambda_function.zip
    Description: S3 object key for Lambda function code

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${FunctionName}-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
        - PolicyName: !Sub "${FunctionName}-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}*:*"
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref FunctionName
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          RUN_ID: '7e4d948df63a47eb92a5b2cd3886c913'

  LambdaApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/predict"

  MyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyApi

  MyApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: predict

  MyApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref MyApiResource
      RestApiId: !Ref MyApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              'application/json': ''  # Empty response template for successful case
          - StatusCode: '500'
            SelectionPattern: '^\[ERROR\].*'
            ResponseTemplates:
              'application/json': '{"error": "Internal Server Error"}'  # Custom error response
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': SalaryResponseModel


  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: MyApiMethod
    Properties:
      RestApiId: !Ref MyApi
      StageName: prod

  SalaryResponseModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref MyApi
      ContentType: 'application/json; charset=utf-8'
      Name: SalaryResponseModel
      Schema: |
        {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "object",
          "properties": {
            "work_year": {
              "type": "integer"
            },
            "experience_level": {
              "type": "string"
            },
            "employment_type": {
              "type": "string"
            },
            "job_title": {
              "type": "string"
            },
            "salary": {
              "type": "number"
            },
            "salary_currency": {
              "type": "string"
            },
            "employee_residence": {
              "type": "string"
            },
            "remote_ratio": {
              "type": "number"
            },
            "company_location": {
              "type": "string"
            },
            "company_size": {
              "type": "string"
            }
          },
          "required": ["work_year", "experience_level", "employment_type", "job_title", "salary", "salary_currency", "employee_residence", "remote_ratio", "company_location", "company_size"]
        }

Outputs:
  ApiEndpoint:
    Description: "API endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/predict"
